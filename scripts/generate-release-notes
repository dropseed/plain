#!/bin/sh -e

PROMPT="Your job is to write markdown release notes for a specific package version released from this monorepo. To do this, find the previous semver release for this same package, and evaluate all of the relevant changes since the previous version. Use the git commit messages and diffs to decide what to include in the release notes.

DO NOT include changes from other packages in this repo unless they are directly relevant to this package's release.

The release notes should include two sections.

The first is a \"What's changed\" section that should provide short summaries of changes that an end-user would care about (they likely don't care about internal refactors or changes that don't affect the public API or user experience). Where posssible, include the git commit hash where the change took place.

The second section is the \"Upgrade instructions\". This should also be a bulleted list of anything the user *needs* to do when upgrading from the previous version to this one. The upgrade instructions should be specific and actionable, so that a human or AI could read them and make the changes quickly and easily. If they don't *need* to do anything, then leave one instruction of \"No changes required\".

Example release notes:

---

## [0.50.0](https://github.com/dropseed/plain/releases/plain@0.50.0) (2025-06-23)

### What's changed

- The \`testbrowser\` uses \`gunicorn\` relative to the running Python executable ([abc1234](https://github.com/dropseed/plain/commit/abc1234))
- Trailing slashes are stripped automatically from \`plain tunnel DESTINATION\` ([def5678](https://github.com/dropseed/plain/commit/def5678))
- The \`plainhtmx:load\` event has been removed in favor of \`load\` ([ghi9012](https://github.com/dropseed/plain/commit/ghi9012))

### Upgrade instructions

- Replace any usage of the \`plainhtmx:load\` event with the standard \`load\` event in your templates (ex. \`hx-trigger=\"plainhtmx:load from:body\"\` changes to \`hx-trigger=\"load from:body\"\`)

---

Write the release notes to the CHANGELOG.md file in the associated package (i.e. plain-admin/plain/admin/CHANGELOG.md). If the version isn't in the CHANGELOG yet, add it.

Once the CHANGELOG.md is updated and you are finished, simply output the release notes for this version, nothing else. This command will be piped to another command.

Generate release notes for this package version (the current commit which is not yet tagged but will be as {pkg}@{version}):"

PKG="$1"
VERSION="$2"
if [ -z "$PKG" ]; then
  echo "Usage: $0 <PKG> <VERSION>"
  exit 1
fi

NOTES=$(codex -m o3 --flex-mode --full-auto --no-project-doc -q "$PROMPT $PKG $VERSION" | tee /dev/stderr | jq --raw-output --slurp '.[-1].content[0].text')

echo "\n\n"

echo "$NOTES"

if [ -z "$NOTES" ]; then
  echo "No release notes generated. Exiting."
  exit 1
fi

echo "\n\n"

# # Wait for the user to confirm the release notes
# read -p "Do you want to create a release with these notes? (y/n): " confirm
# if [ "$confirm" != "y" ]; then
#     echo "Release creation aborted."
#     exit 0
# fi

# gh release create "$TAG" --notes "$NOTES" --verify-tag --latest=false
